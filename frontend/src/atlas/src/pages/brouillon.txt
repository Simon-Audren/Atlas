
  async function fetchRandomQuestion() {
    setLoading(true);
    setSelectedAnswer(null);
    setCorrectAnswerIndex(null);
  
    const { data, error } = await supabase.from("questions").select("*");
  
    if (error) {
      console.error("Erreur:", error);
    } else {
      // 1. Appliquer la nouvelle fonction de probabilité à chaque question en fonction de son ELO
      const applyProbability = (elo) => {
        // Nouvelle distribution de probabilité à appliquer
        const factor = 0.2 / (4 * Math.sqrt(2 * Math.PI));
        const exponent = -((0.03 * Math.pow(elo, 2)) / Math.pow(20, 2));
        return factor * Math.exp(exponent);
      };
  
      // 2. Créer un tableau des probabilités pour chaque question en fonction de son ELO
      const probabilities = data.map((question) => ({
        question: question,
        probability: applyProbability(question.elo),
      }));
  
      // 3. Normaliser les probabilités (pour que la somme fasse 1)
      const totalProbability = probabilities.reduce((sum, probObj) => sum + probObj.probability, 0);
      probabilities.forEach((probObj) => {
        probObj.normalizedProbability = probObj.probability / totalProbability;
      });
  
      // 4. Générer un tirage basé sur les probabilités normalisées
      const randomValue = Math.random();
      let cumulativeProbability = 0;
      let selectedQuestion = null;
  
      for (const probObj of probabilities) {
        cumulativeProbability += probObj.normalizedProbability;
        if (randomValue <= cumulativeProbability) {
          selectedQuestion = probObj.question;
          break;
        }
      }
  
      // 5. Mettre à jour l'état avec la question sélectionnée
      setQuestion(selectedQuestion);
  
      const allAnswers = [
        selectedQuestion.correct_answer,
        selectedQuestion.wrong_answer_1,
        selectedQuestion.wrong_answer_2,
        selectedQuestion.wrong_answer_3,
        selectedQuestion.wrong_answer_4,
        selectedQuestion.wrong_answer_5,
      ];
  
      const shuffledAnswers = allAnswers.sort(() => Math.random() - 0.5);
      setAnswers(shuffledAnswers);
  
      // Stocke l'index de la bonne réponse après mélange
      setCorrectAnswerIndex(shuffledAnswers.indexOf(selectedQuestion.correct_answer));
    }
    setLoading(false);
}